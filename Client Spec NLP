{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/emilypfm/portfolio/blob/main/cmpb_sentiment_analysis.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fGR42Om-6nOB",
        "outputId": "d4bd08c3-d686-4b9c-fa83-850401a378ac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.12.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (1.5.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.22.4)\n",
            "Collecting pickle5\n",
            "  Downloading pickle5-0.0.11.tar.gz (132 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m132.1/132.1 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (2.12.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (23.3.3)\n",
            "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.54.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.8.0)\n",
            "Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.10)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (16.0.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (23.1)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: tensorboard<2.13,>=2.12 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.12.2)\n",
            "Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.12.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.3.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.5.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.32.0)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.10.1)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.2.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.1.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2022.7.1)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.40.0)\n",
            "Requirement already satisfied: ml-dtypes>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from jax>=0.3.15->tensorflow) (0.1.0)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (2.17.3)\n",
            "Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (1.0.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (3.4.3)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (2.27.1)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (0.7.0)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (1.8.1)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (2.3.0)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (5.3.0)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (0.3.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow) (1.3.1)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (3.4)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow) (2.1.2)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (0.5.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow) (3.2.2)\n",
            "Building wheels for collected packages: pickle5\n",
            "  Building wheel for pickle5 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pickle5: filename=pickle5-0.0.11-cp310-cp310-linux_x86_64.whl size=256410 sha256=0daa0a26ffa360e65f9e032f791a706f84d432b6955b5b71499f82b647ded89d\n",
            "  Stored in directory: /root/.cache/pip/wheels/7d/14/ef/4aab19d27fa8e58772be5c71c16add0426acf9e1f64353235c\n",
            "Successfully built pickle5\n",
            "Installing collected packages: pickle5\n",
            "Successfully installed pickle5-0.0.11\n"
          ]
        }
      ],
      "source": [
        "! pip install tensorflow scikit-learn pandas numpy pickle5 keras"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YTaLiFaZ6v5Q"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense, Dropout\n",
        "import pickle5 as pickle\n",
        "import io\n",
        "from google.colab import files\n",
        "import pandas as pd\n",
        "from wordcloud import WordCloud, STOPWORDS\n",
        "import matplotlib.pyplot as plt\n",
        "import csv\n",
        "from collections import Counter\n",
        "import string\n",
        "import keras\n",
        "from PIL import Image"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Yiu3JHLratI_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "BHzeuXao65xx",
        "outputId": "e70a0531-c5ab-4300-bac6-c1e55372e46e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-2bdcf688-0728-48f4-aed0-66c24cb0c0ac\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-2bdcf688-0728-48f4-aed0-66c24cb0c0ac\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving milk_comments.csv to milk_comments.csv\n"
          ]
        }
      ],
      "source": [
        "uploaded = files.upload()\n",
        "df = pd.read_csv(io.BytesIO(uploaded['milk_comments.csv']))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def check_dataset(dataframe):\n",
        "  print(dataframe.head())\n",
        "  unique_labels = dataframe['sentiment'].unique()\n",
        "  print(unique_labels)"
      ],
      "metadata": {
        "id": "h0BXueT1-XCR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "check_dataset(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RZZoQTTGfMYy",
        "outputId": "420fa38d-bf49-4a81-969e-3fb652e247ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                   comment sentiment\n",
            "0                                   Me too  negative\n",
            "1     Almond milk is a dairy-free delight.  negative\n",
            "2  Almond milk is a delicious alternative.  negative\n",
            "3    Almond milk is a guilt-free pleasure.  negative\n",
            "4       Almond milk is a healthier choice.  negative\n",
            "['negative' 'neutral' 'positive']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer = Tokenizer(num_words=5000, oov_token='<OOV>')\n",
        "\n",
        "def tokenize(dataframe):\n",
        "  dataframe = dataframe.sample(frac=1).reset_index(drop=True)\n",
        "  tokenizer.fit_on_texts(dataframe['comment'])\n",
        "  word_index = tokenizer.word_index\n",
        "  sequences = tokenizer.texts_to_sequences(dataframe['comment'])\n",
        "  padded_sequences = pad_sequences(sequences, maxlen=100, truncating='post')\n",
        "\n",
        "  sentiment_labels = pd.get_dummies(dataframe['sentiment']).values\n",
        "\n",
        "  return sentiment_labels, padded_sequences\n"
      ],
      "metadata": {
        "id": "43PWlczF_Rjz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sentiment_labels, padded_sequences = tokenize(df)\n",
        "x_train, x_test, y_train, y_test = train_test_split(padded_sequences, sentiment_labels, test_size=0.2)"
      ],
      "metadata": {
        "id": "FqZewCpy_jcF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "model.add(Embedding(5000, 100, input_length=100))\n",
        "model.add(Conv1D(64, 5, activation='relu'))\n",
        "model.add(GlobalMaxPooling1D())\n",
        "model.add(Dense(32, activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(3, activation='softmax'))\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Sw7Kw5u_n7U",
        "outputId": "787de5f9-46bb-48b9-fcf8-3bed7b0fedc0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding (Embedding)       (None, 100, 100)          500000    \n",
            "                                                                 \n",
            " conv1d (Conv1D)             (None, 96, 64)            32064     \n",
            "                                                                 \n",
            " global_max_pooling1d (Globa  (None, 64)               0         \n",
            " lMaxPooling1D)                                                  \n",
            "                                                                 \n",
            " dense (Dense)               (None, 32)                2080      \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 32)                0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 3)                 99        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 534,243\n",
            "Trainable params: 534,243\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x_train, y_train, epochs=40, batch_size=32, validation_data=(x_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RR3oxoHg_toZ",
        "outputId": "d504e7c4-ce66-4795-a85e-35ab8149fde7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "36/36 [==============================] - 4s 45ms/step - loss: 0.9144 - accuracy: 0.6711 - val_loss: 0.7706 - val_accuracy: 0.7117\n",
            "Epoch 2/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.7853 - accuracy: 0.7130 - val_loss: 0.6633 - val_accuracy: 0.7794\n",
            "Epoch 3/40\n",
            "36/36 [==============================] - 1s 34ms/step - loss: 0.6362 - accuracy: 0.7594 - val_loss: 0.5568 - val_accuracy: 0.7900\n",
            "Epoch 4/40\n",
            "36/36 [==============================] - 2s 46ms/step - loss: 0.5023 - accuracy: 0.8048 - val_loss: 0.4711 - val_accuracy: 0.8114\n",
            "Epoch 5/40\n",
            "36/36 [==============================] - 2s 52ms/step - loss: 0.3420 - accuracy: 0.8770 - val_loss: 0.4012 - val_accuracy: 0.8256\n",
            "Epoch 6/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.2316 - accuracy: 0.9385 - val_loss: 0.4394 - val_accuracy: 0.8363\n",
            "Epoch 7/40\n",
            "36/36 [==============================] - 1s 30ms/step - loss: 0.1617 - accuracy: 0.9537 - val_loss: 0.4665 - val_accuracy: 0.8541\n",
            "Epoch 8/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0997 - accuracy: 0.9688 - val_loss: 0.4724 - val_accuracy: 0.8577\n",
            "Epoch 9/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0781 - accuracy: 0.9840 - val_loss: 0.5489 - val_accuracy: 0.8505\n",
            "Epoch 10/40\n",
            "36/36 [==============================] - 1s 30ms/step - loss: 0.0661 - accuracy: 0.9840 - val_loss: 0.5799 - val_accuracy: 0.8541\n",
            "Epoch 11/40\n",
            "36/36 [==============================] - 1s 30ms/step - loss: 0.0497 - accuracy: 0.9902 - val_loss: 0.5767 - val_accuracy: 0.8577\n",
            "Epoch 12/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0460 - accuracy: 0.9866 - val_loss: 0.6729 - val_accuracy: 0.8434\n",
            "Epoch 13/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0399 - accuracy: 0.9938 - val_loss: 0.6989 - val_accuracy: 0.8399\n",
            "Epoch 14/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0246 - accuracy: 0.9947 - val_loss: 0.7341 - val_accuracy: 0.8505\n",
            "Epoch 15/40\n",
            "36/36 [==============================] - 2s 50ms/step - loss: 0.0343 - accuracy: 0.9893 - val_loss: 0.7768 - val_accuracy: 0.8399\n",
            "Epoch 16/40\n",
            "36/36 [==============================] - 2s 48ms/step - loss: 0.0478 - accuracy: 0.9857 - val_loss: 0.7794 - val_accuracy: 0.8470\n",
            "Epoch 17/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0246 - accuracy: 0.9964 - val_loss: 0.7633 - val_accuracy: 0.8399\n",
            "Epoch 18/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0153 - accuracy: 0.9964 - val_loss: 0.8156 - val_accuracy: 0.8470\n",
            "Epoch 19/40\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.0232 - accuracy: 0.9955 - val_loss: 0.8388 - val_accuracy: 0.8434\n",
            "Epoch 20/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0189 - accuracy: 0.9947 - val_loss: 0.8952 - val_accuracy: 0.8434\n",
            "Epoch 21/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0143 - accuracy: 0.9973 - val_loss: 0.9167 - val_accuracy: 0.8434\n",
            "Epoch 22/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0127 - accuracy: 0.9964 - val_loss: 0.9311 - val_accuracy: 0.8470\n",
            "Epoch 23/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0131 - accuracy: 0.9982 - val_loss: 0.9618 - val_accuracy: 0.8470\n",
            "Epoch 24/40\n",
            "36/36 [==============================] - 1s 30ms/step - loss: 0.0160 - accuracy: 0.9964 - val_loss: 0.9727 - val_accuracy: 0.8541\n",
            "Epoch 25/40\n",
            "36/36 [==============================] - 1s 35ms/step - loss: 0.0151 - accuracy: 0.9947 - val_loss: 0.9792 - val_accuracy: 0.8399\n",
            "Epoch 26/40\n",
            "36/36 [==============================] - 2s 52ms/step - loss: 0.0131 - accuracy: 0.9947 - val_loss: 1.0205 - val_accuracy: 0.8434\n",
            "Epoch 27/40\n",
            "36/36 [==============================] - 2s 42ms/step - loss: 0.0109 - accuracy: 0.9973 - val_loss: 1.0130 - val_accuracy: 0.8505\n",
            "Epoch 28/40\n",
            "36/36 [==============================] - 1s 30ms/step - loss: 0.0091 - accuracy: 0.9973 - val_loss: 1.0721 - val_accuracy: 0.8505\n",
            "Epoch 29/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0117 - accuracy: 0.9964 - val_loss: 1.0818 - val_accuracy: 0.8470\n",
            "Epoch 30/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0101 - accuracy: 0.9964 - val_loss: 1.0875 - val_accuracy: 0.8470\n",
            "Epoch 31/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0092 - accuracy: 0.9982 - val_loss: 1.1708 - val_accuracy: 0.8470\n",
            "Epoch 32/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0078 - accuracy: 0.9991 - val_loss: 1.1911 - val_accuracy: 0.8505\n",
            "Epoch 33/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0100 - accuracy: 0.9973 - val_loss: 1.2060 - val_accuracy: 0.8505\n",
            "Epoch 34/40\n",
            "36/36 [==============================] - 1s 30ms/step - loss: 0.0082 - accuracy: 0.9973 - val_loss: 1.2219 - val_accuracy: 0.8505\n",
            "Epoch 35/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0080 - accuracy: 0.9982 - val_loss: 1.2943 - val_accuracy: 0.8470\n",
            "Epoch 36/40\n",
            "36/36 [==============================] - 1s 40ms/step - loss: 0.0132 - accuracy: 0.9938 - val_loss: 1.3265 - val_accuracy: 0.8470\n",
            "Epoch 37/40\n",
            "36/36 [==============================] - 2s 53ms/step - loss: 0.0100 - accuracy: 0.9955 - val_loss: 1.2754 - val_accuracy: 0.8470\n",
            "Epoch 38/40\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 0.0069 - accuracy: 0.9964 - val_loss: 1.3398 - val_accuracy: 0.8577\n",
            "Epoch 39/40\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0078 - accuracy: 0.9973 - val_loss: 1.2922 - val_accuracy: 0.8470\n",
            "Epoch 40/40\n",
            "36/36 [==============================] - 1s 30ms/step - loss: 0.0046 - accuracy: 1.0000 - val_loss: 1.3121 - val_accuracy: 0.8470\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f1084613fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = np.argmax(model.predict(x_test), axis=-1)\n",
        "print(\"Accuracy:\", accuracy_score(np.argmax(y_test, axis=-1), y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dlomH6CAESU1",
        "outputId": "777df71c-2c94-417f-aa88-e38a3ed07281"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9/9 [==============================] - 0s 12ms/step\n",
            "Accuracy: 0.8469750889679716\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('sentiment_analysis_model.h5')\n",
        "with open('tokenizer.pickle', 'wb') as handle:\n",
        "    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)"
      ],
      "metadata": {
        "id": "lwxDPf36ZQuP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "fpnJxcc2a5ib"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_sentiment(dataframe):\n",
        "   #clean data\n",
        "    #dataframe[~dataframe.text.str.startswith('@')]\n",
        "    #dataframe[~dataframe.text.str.contains('DM')]\n",
        "\n",
        "   # Tokenize and pad the input text\n",
        "    text_sequence = tokenizer.texts_to_sequences(dataframe['text'])\n",
        "    padded_sequences = pad_sequences(text_sequence, maxlen=100)\n",
        "\n",
        "    # Make a prediction using the trained model\n",
        "    predicted_ratings = model.predict(padded_sequences)\n",
        "    sentiment_labels = ['Negative', 'Neutral', 'Positive']\n",
        "    predicted_sentiments = [sentiment_labels[np.argmax(rating)] for rating in predicted_ratings]\n",
        "    dataframe['predicted sentiment'] = predicted_sentiments\n",
        "\n",
        "    pos_count = len(dataframe[dataframe['predicted sentiment'].str.contains('Positive')])\n",
        "    neu_count = len(dataframe[dataframe['predicted sentiment'].str.contains('Neutral')])\n",
        "    neg_count = len(dataframe[dataframe['predicted sentiment'].str.contains('Negative')])\n",
        "\n",
        "    pos_df = dataframe[dataframe['predicted sentiment'].str.contains('Positive|Neutral')]\n",
        "    neg_df = dataframe[dataframe['predicted sentiment'].str.contains('Negative')]\n",
        "\n",
        "\n",
        "    positive_sentiment = ((pos_count + neu_count)/(pos_count + neu_count +neg_count))*100\n",
        "    negative_sentiment = ((neg_count)/(pos_count + neu_count +neg_count))*100\n",
        "\n",
        "    return positive_sentiment, negative_sentiment, pos_df, neg_df"
      ],
      "metadata": {
        "id": "83Kat3DEaNPq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the saved model and tokenizer\n",
        "model = keras.models.load_model('sentiment_analysis_model.h5')\n",
        "with open('tokenizer.pickle', 'rb') as handle:\n",
        "    tokenizer = pickle.load(handle)"
      ],
      "metadata": {
        "id": "fQUKmuXBaGji"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "uploaded = files.upload()\n",
        "comments = pd.read_csv(io.BytesIO(uploaded['comment_sent_testing.csv']))\n",
        "positive_sentiment, negative_sentiment, pos_df, neg_df = predict_sentiment(comments)\n",
        "print(positive_sentiment)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        },
        "id": "kxotdUFdaTGp",
        "outputId": "238b9269-4e6d-43f6-a35b-70aefe058c76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f40313cd-e847-46a8-9e89-337727c6060b\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f40313cd-e847-46a8-9e89-337727c6060b\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving comment_sent_testing.csv to comment_sent_testing.csv\n",
            "95/95 [==============================] - 1s 7ms/step\n",
            "89.1856247939334\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Word Cloud Code"
      ],
      "metadata": {
        "id": "-wQDA1rKoZ_v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def table(dataframe):\n",
        "\n",
        "    comments_only = dataframe.iloc[:, 0]\n",
        "    comments_only = comments_only.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)).lower())\n",
        "\n",
        "    # Create frequency table\n",
        "    word_list = []\n",
        "    for comment in comments_only:\n",
        "        words = comment.split()  # Split comment into individual words\n",
        "        word_list.extend(words)\n",
        "\n",
        "    frequency_table = Counter(word_list)\n",
        "\n",
        "    # Convert frequency table to a dataframe\n",
        "    df = pd.DataFrame.from_dict(frequency_table, orient='index', columns=['Frequency'])\n",
        "    df.index.name = 'Word'\n",
        "    df.reset_index(inplace=True)\n",
        "\n",
        "    # Remove stop words and filler/transition words\n",
        "    stopwords = set(STOPWORDS)\n",
        "    stopwords.update(['the', 'and', 'of', 'to', 'in', 'that', 'it','make', 'seasoning', 'with', 'for', 'as', 'was', 'is', 'on', 've','let','at', 'by', 'be', 'this', 'an', 'or', 'which', 'from', 'but', 'not', 'are', 'they', 'you', 'have', 'were', 'we', 'been', 'can', 'has', 'who', 'more', 'their', 'if', 'when', 'than', 'one', 'all', 'some', 'no', 'what', 'so', 'out', 'up', 'other', 'its', 'our', 'would', 'could', 'should', 'may', 'will', 'there', 'then', 'any', 'do', 'had', 'my', 'me', 'him', 'her', 'his', 'hers', 'cute','them', 'your', 'know', 's','t'])\n",
        "\n",
        "    # Create a string containing all the words\n",
        "    text = ' '.join(df['Word'].values)\n",
        "\n",
        "    # Generate a word cloud\n",
        "    wordcloud = WordCloud(width=1600, height=800,\n",
        "                          background_color='white',                          colormap='Blues',\n",
        "                          stopwords=stopwords,\n",
        "                          min_font_size=20)\n",
        "\n",
        "    # Generate the word cloud image\n",
        "    wordcloud.generate_from_text(text)\n",
        "\n",
        "    # Get word frequencies\n",
        "    word_frequencies = wordcloud.process_text(text)\n",
        "\n",
        "    # Calculate the minimum and maximum frequencies\n",
        "    min_frequency = min(word_frequencies.values())\n",
        "    max_frequency = max(word_frequencies.values())\n",
        "\n",
        "    # Custom color function\n",
        "    def color_func(word, font_size, position, orientation, random_state=None, **kwargs):\n",
        "        frequency = word_frequencies[word]\n",
        "        frequency_range = max_frequency - min_frequency\n",
        "        intensity = 1 - ((frequency - min_frequency) / frequency_range)  # Adjusted intensity calculation\n",
        "        return f\"hsl(0, 0%, {intensity * 50 + 50}%)\"\n",
        "\n",
        "    # Recolor the word cloud image\n",
        "    wordcloud.recolor(color_func=color_func)\n",
        "\n",
        "    # Plot the word cloud\n",
        "    plt.figure(figsize=(8, 8), facecolor=None)\n",
        "    plt.imshow(wordcloud, interpolation=\"bilinear\")\n",
        "    plt.axis(\"off\")\n",
        "    plt.tight_layout(pad=0)\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "    return plt"
      ],
      "metadata": {
        "id": "ed6kvD7iCIQe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "word_cloud_df = table(pos_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "HCeHHfbSGeXI",
        "outputId": "056b59d8-7879-4d6a-8053-49aca9e84907"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMlurvrLcBIjeTRmuNAbf/w",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
